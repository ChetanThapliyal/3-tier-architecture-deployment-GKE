pipeline {
    agent any
    tools {
        nodejs 'nodeProd'
    }
    environment {
        SCANNER_HOME = tool 'sonar-prod'
        PROJECT_ID = "${PROJECT_ID}"
        CLUSTER_NAME = "${CLUSTER_NAME}"
        LOCATION = "${LOCATION}"
        CREDENTIALS_ID = 'jenkins-gke-key'
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-cred', url: 'https://github.com/ChetanThapliyal/YelpCampAPP'
            }
        }
        
        stage('Install Package Dependencies') {
            steps {
                sh "npm install"
            }
        }
        
        stage('Unit Tests') {
            steps {
                sh "npm test"
            }
        }
        
        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs --format table -o fs-report.html ."
            }
        }
        
        stage('Sonarqube') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh "$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=Campground -Dsonar.projectName=Campground"
                }
            }
        }
        
        stage('Build and Tag Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred', toolName: 'docker-prod') {
                        sh "docker image build -t che01tan/camp:latest ."
                    }
                }
            }
        }
        
        stage('Docker Image Scan') {
            steps {
                sh "trivy image --format table -o trivy-image-report.html che01tan/camp:latest"
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    withDockerRegistry([credentialsId: 'docker-cred', toolName: 'docker-prod']) {
                        sh "docker push che01tan/camp:latest"
                    }
                }
            }
        }
        
        // stage('Configure kubectl') {
        //     steps {
        //         withCredentials([file(credentialsId: 'gke-cred-file', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
        //             sh '''
        //                 gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
        //                 gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${LOCATION} --project ${PROJECT_ID}
        //             '''
        //         }
        //     }
        // }

        stage('Deploy to GKE') {
            steps {
                step([
                    $class: 'KubernetesEngineBuilder', 
                    projectId: env.PROJECT_ID, 
                    clusterName: env.CLUSTER_NAME, 
                    location: env.LOCATION, 
                    manifestPattern: 'k8/deployment.yaml', 
                    credentialsId: env.CREDENTIALS_ID, 
                    verifyDeployments: true])
                echo "Deployment Finished"
            }
        }
    }
}
